/* Copyright 2018 Case Western Reserve University
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy 
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights 
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
 * copies of the Software, and to permit persons to whom the Software is 
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package edu.cwru.pp4j.recode.ui;

import java.io.PipedInputStream;
import java.io.InputStreamReader;
import javax.swing.SwingWorker;


/**
 * Message terminal to monitor verbose output of search.
 * 
 * @author Sean Maxwell
 */
public class GraphicalUserInterfaceTerminal extends javax.swing.JFrame {

    private class BgIoReader extends SwingWorker<String,PipedInputStream> {
        //BufferedReader bin;
        InputStreamReader in;
        BgIoReader(String s, PipedInputStream is) {
            in = new InputStreamReader(is);
        }
        
        @Override
        protected String doInBackground() throws Exception {
            String line = "";
            int c;
            while((c = in.read()) != -1) {
                terminalTextArea.append(String.format("%c",c));
                terminalTextArea.setCaretPosition(terminalTextArea.getDocument().getLength());
                //terminalScrollPane.getVerticalScrollBar().setValue(terminalScrollPane.getVerticalScrollBar().getMaximum());
            }
            return "OK";
        }
        
        @Override
        protected void done() {
            terminalTextArea.append("\n------------------------\nRead loop exited in terminal\n------------------------\n");
            try {
                int c;
                while((c = in.read()) != -1) {
                    terminalTextArea.append(String.format("%c",c));
                    terminalTextArea.setCaretPosition(terminalTextArea.getDocument().getLength());
                }
            }
            catch(Exception e) {
                terminalTextArea.append(e.toString());
                e.printStackTrace(System.out);
            }
        }
    }
    
    /**
     * Creates new form GraphicalUserInterfacePhosMsgfTerminal
     * 
     * @param in The source of text to display in the terminal
     */
    public GraphicalUserInterfaceTerminal(PipedInputStream in) {
        initComponents();
        (new BgIoReader(null,in)).execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        terminalScrollPane = new javax.swing.JScrollPane();
        terminalTextArea = new javax.swing.JTextArea();

        setTitle("Message Terminal");

        terminalScrollPane.setBackground(new java.awt.Color(254, 254, 254));
        terminalScrollPane.setAutoscrolls(true);

        terminalTextArea.setColumns(20);
        terminalTextArea.setLineWrap(true);
        terminalTextArea.setRows(5);
        terminalScrollPane.setViewportView(terminalTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(terminalScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(terminalScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphicalUserInterfaceTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphicalUserInterfaceTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphicalUserInterfaceTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphicalUserInterfaceTerminal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphicalUserInterfaceTerminal(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane terminalScrollPane;
    private javax.swing.JTextArea terminalTextArea;
    // End of variables declaration//GEN-END:variables
}
